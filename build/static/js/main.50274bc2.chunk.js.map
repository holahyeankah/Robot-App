{"version":3,"sources":["Containers/Searchbox.js","Containers/Card.js","Containers/CardList.js","Containers/Scroll.js","Components/App.js","serviceWorker.js","index.js"],"names":["Searchbox","search","className","type","placeholder","onChange","Card","id","name","email","alt","src","CardList","robots","map","user","i","key","Scroll","props","style","overflowY","border","display","flexDirection","height","children","App","onSearchChange","event","console","log","target","value","setState","searchfield","state","fetch","then","response","json","data","this","filteredRobot","filter","robot","toLowerCase","includes","length","fontSize","fontStyle","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0NAUeA,EARC,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACd,OACI,yBAAKC,UAAU,OACX,2BAAOA,UAAU,iCAAiCC,KAAK,OAAOC,YAAY,gBAAgBC,SAAUJ,MCajGK,EAfH,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MACpB,OACA,yBAAKP,UAAU,uEACV,yBAAKQ,IAAI,GAAGC,IAAG,+BAA2BJ,EAA3B,gCAEf,yBAAKL,UAAU,MAEpB,2BAAIM,GACJ,2BAAIC,MCGOG,EAXC,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACd,OACA,6BACeA,EAAOC,KAAI,SAACC,EAAMC,GAC7B,OAAO,kBAAC,EAAD,CAAOC,IAAKD,EAAGT,GAAIM,EAAOG,GAAGT,GAAIC,KAAMK,EAAOG,GAAGR,KAAMC,MAAOI,EAAOG,GAAGP,aCKxES,G,MATF,SAACC,GACV,OACI,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAkBC,QAAQ,OAAOC,cAAc,MAAOC,OAAO,UAChGN,EAAMO,YC6CJC,E,kDA1CX,aAAc,IAAD,8BACT,gBAaJC,eAAe,SAACC,GACZC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKC,SAAS,CAACC,YAAYN,EAAMG,OAAOC,SAdxC,EAAKG,MAAM,CACPvB,OAAO,GACPsB,YAAY,IAJP,E,gEAOO,IAAD,OACfL,QAAQC,IAAI,SACZM,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAI,OAAE,EAAKP,SAAS,CAACrB,OAAO4B,S,+BAQ7B,IAAD,EACuBC,KAAKN,MAA1BvB,EADF,EACEA,OAAQsB,EADV,EACUA,YACRQ,EAAc9B,EAAO+B,QAAO,SAAAC,GAC9B,OAAOA,EAAMrC,KAAKsC,cAAcC,SAASZ,EAAYW,kBAE1D,OAAQjC,EAAOmC,OAIV,yBAAK9C,UAAU,UACX,uBAAGkB,MAAO,CAAC6B,SAAS,OAAOC,UAAU,YAArC,eACA,kBAAC,EAAD,CAAWjD,OAAQyC,KAAKd,iBACxB,kBAAC,EAAD,KACV,kBAAC,EAAD,CAAUf,OAAQ8B,MAPd,8C,GA1BQQ,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAEL,kBAAC,EAAD,MACFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,a","file":"static/js/main.50274bc2.chunk.js","sourcesContent":["import React from 'react'\n\nconst Searchbox=({search})=>{\n    return(\n        <div className=\"pa2\">\n            <input className=\"pa3 tc ba mt2 bg-lightest-blue\" type=\"text\" placeholder=\"search robots\" onChange={search}/>\n        </div>\n    )\n}\n\nexport default Searchbox","import React from 'react';\n\n\nconst Card =({id, name, email})=>{\n    return( \n    <div className='pa2 f3 left dib pa3 mt5 ma5 grow shadow-5 br3 bw2 tc bg-light-green'>\n         <img alt='' src ={`https://robohash.org/${id}.png?set=set1&size=150x150`}/>\n\n         <div className='f5'>\n             \n    <p>{name}</p>\n    <p>{email}</p>\n    </div>\n\n    </div>\n    )\n}\n\nexport default Card","import React from 'react';\nimport Card from './Card';\n\nconst CardList =({robots})=>{\n    return( \n    <div>\n                  {robots.map((user, i)=>{ \n        return <Card  key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\n\n        })}\n\n    </div>)\n}\n\nexport default CardList","import React from 'react';\n\n\nconst Scroll=(props)=>{\n    return(\n        <div style={{overflowY:'scroll', border:'2px solid black',display:'flex',flexDirection:'row', height:'600px'}}>\n            {props.children}\n            </div>\n    )\n}\n\n\nexport default Scroll","\nimport React, { Component} from 'react';\nimport Searchbox from '../Containers/Searchbox';\n// import { robots } from './robots';\nimport CardList from '../Containers/CardList'\nimport './App.css';\nimport Scroll from '../Containers/Scroll'\n\nclass App extends Component{\n    constructor(){\n        super();\n        this.state={\n            robots:[],\n            searchfield:''\n        }\n    }\n    componentDidMount(){\n        console.log('check')\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=>response.json())\n        .then(data=>this.setState({robots:data}))\n        \n    }\n    onSearchChange=(event)=>{\n        console.log(event.target.value)\n        this.setState({searchfield:event.target.value})\n       \n    }\n    render(){\n        const{robots, searchfield}=this.state\n        const filteredRobot=robots.filter(robot=>{\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        })\n       return !robots.length ?\n          <h1>Loading...</h1>\n     :(\n                  \n            <div className=\"tc ma3\" >\n                <b style={{fontSize:'30px',fontStyle:'fantasy'}}>RoboFriends</b>\n                <Searchbox search={this.onSearchChange}/>\n                <Scroll>\n      <CardList robots={filteredRobot}/>\n      </Scroll>\n            </div>\n     \n        \n        )\n        }\n        \n        \n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  \n    <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister()\n"],"sourceRoot":""}